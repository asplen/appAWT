Вычерчивание графических элементов

Построить новое приложение на основе Frame фактически довольно
легко. В целом понадобится создать подкласс Frame, переопределить
метод paint () для обеспечения вывода в окно и реализовать необходимые
прослушиватели событий. Во всех случаях должен быть реализован метод
windowClosing () интерфейса WindowListener. В экземпляре Frame
верхнего уровня обычно вызывается System.exit () для завершения программы.
Чтобы просто удалить вторичный экземпляр Frame из экрана, можно вызвать
setVisible (false) при закрытии окна.
После определения подкласса Frame можно создать ero экземпляр, что
даст начало существованию фреймового окна, но оно не будет видимым.
Фреймовое окно делается видимым с помощью вызова setVisible (true).
При создании окно получает стандартную высоту и ширину. Вызвав метод
setSize (), можно установить размеры окна явно. Для экземпляра Frame
верхнего уровня потребуется определить заголовок.

Исходная точка каждого окна
находится в верхнем левом углу и равна 0,0.
Координаты указываются в пикселях. Весь вывод в окно происходит через графический контекст.

Графический контекст инкапсулирован в классе Graphics.

• он передается методу вроде paint () или update () в качестве аргумента;
• он возвращается методом getGraphics ( ) класса Component.

Вычерчивание линий
Линии вычерчиваются с помощью метода drawLine () :
void drawLine ( int startX, int startY, int endX, int endY)
Метод drawLine ( ) отображает линию с текущим цветом рисования, которая начинается в позиции
startX, s tartY и заканчивается в позиции endX, endY.

Вычерчивание прямоугольников
Методы drawRect () и fil lRect () отображают контурный и заполненный прямоугольник соответственно:
void drawRect ( int left, int top, int width , int height )
void fillRect ( int left, int top, int width, int height )
Верхний левый угол прямоугольника находится в left, top.
Размеры прямоугольника указываются в width и height.
Для вычерчивания прямоугольника со скругленными углами предназначены методы drawRoundRect () и fillRoundRect ():
void drawRoundRect ( int left, int top, int width , int height, int xDiarn, int yDi arn)
void fillRoundRect ( int left, int top , int width , int height, int xDiarn, int yDiarn)
Диаметр дуги закругления по оси Х задается параметром xDiam, а по оси У - параметром yDiam.

Вычерчивание эллипсов и окружностей
Метод drawOval () предназначен для вычерчивания эллипса, а метод fillOval () - для его заполнения:
void drawOval ( int left, int top, int width , int height )
void fillOval ( int left, int top, int width, int height)
Эллипс вычерчивается внутри ограничивающего прямоугольника, левый
верхний угол которого задается в left и top, а ширина и высота - в width
и height. Чтобы нарисовать окружность, необходимо указать квадрат в качестве ограничивающего прямоугольника.

Вычерчивание дуг
Дуги можно вычерчивать с помощью методов drawArc () и fil lArc ():
void drawArc ( int left, int top, int width, int height , int startAngle, int sweepAngle )
void fillArc ( int left, int top, int width , int hei ght , int startAng le, int sweepAngle)
Дуга ограничена прямоугольником, левый верхний угол которого указан
в left и top, а ширина и высота - в width и height. Дуга вычерчивается
от startAngle на угловое расстояние, заданное в SweeAngle.
Углы представлены в градусах.
Ноль градусов соответствует горизонтали в положении
часовой стрелки, указывающей на три часа. Дуга рисуется против часовой
стрелки при положительном значении sweepAngle и по часовой стрелке при
отрицательном значении sweepAngle. Таким образом, чтобы вычертить дугу
от двенадцати до шести часов, начальным углом должно быть 90°, а углом развертки - 180°.

Вычерчивание многоугольников
С применением методов drawPolygon () и fil l Polygon () можно вычерчивать фигуры произвольной формы:
void drawPolygon ( int[] х, int [] у, int numPoints )
void fill Polygon ( int[] х, int [] у, int numPoints )
Конечные точки многоугольника задаются парами координат, содержащимися в массивах х и у. Количество точек, определяемых этими массивами,
указывается в параметре numPoints. Существуют альтернативные версии таких методов, в которых многоугольник задается объектом Polygon.